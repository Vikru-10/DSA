Question Link - https://leetcode.com/problems/balanced-binary-tree/

    Brute Force - Time O(n2), Space O(1) #Accepted
    Trick(Calculating height at each level of a node and then finding if it is balanced or not)

    """def height(self,root):
        if not root:
            return 0
        return 1 + max(self.height(root.left),self.height(root.right))
    
    def isBalanced(self, root: Optional[TreeNode]) -> bool: 
        if not root:
            return True
        lh = self.height(root.left)
        rh = self.height(root.right)
        
        if abs(lh-rh)>1:
            return False
        
        left = self.isBalanced(root.left)
        right = self.isBalanced(root.right)
        
        if not left or not right:
            return False
        
        return True

     Most Optimal - Time O(n), Space O(1) #Accepted
     Trick(Cleverly taking the advantage of helper function to find both (height and check balancing) at the same time)
    
      """def isBalanced(self, root: Optional[TreeNode]) -> bool:
        res = [True]
        self.helper(root,res)
        return res[0]
    
      def helper(self,root,res):
        if not root:
            return 0
        left = self.helper(root.left,res)
        right = self.helper(root.right,res)
        if abs(left-right)>1:
            res[0] = False 
        return 1 + max(left,right)"""
