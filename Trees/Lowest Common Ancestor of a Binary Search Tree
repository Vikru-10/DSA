Question Link - https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

    Most Optimal - Time O(n), Space O(1) #Accepted
    Trick(Use binary search property to take advantage in order to find the most optimal)

    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root:
            return None
        if p.val<=root.val<=q.val or p.val>=root.val>=q.val:
            return root 
        elif root.val<p.val and root.val<q.val :
            return self.lowestCommonAncestor(root.right,p,q)
        return self.lowestCommonAncestor(root.left,p,q)
