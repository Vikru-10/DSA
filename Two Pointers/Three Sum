Question Link - https://leetcode.com/problems/3sum/
       
       Best Solution #1 - Time O(n2), Space O(1) #Accepted
       Trick(Understand to move your left until its equal to the previous because of the duplication)
       
       """"res = [];
        nums.sort();
        for i in range(len(nums)-2):
            if(i>0 and nums[i]==nums[i-1]):
                continue;
            target = -nums[i];
            j, k = i+1, len(nums)-1;
            if(j<len(nums)-1 and k<len(nums)):
                    while(j<k):
                        sum = nums[j] + nums[k];
                        if(sum==target):
                            res.append([nums[i],nums[j],nums[k]]);
                            j += 1;
                            while(j<k and nums[j]==nums[j-1]):
                                j += 1;
                        else:
                            if(sum<target):
                                j += 1;
                            else:
                                if(sum>target):
                                    k -= 1;
        return res;"""
        
       Best Solution #2 - Time O(n2), Space O(n) For HashSet #Accepted
       Trick(Understand to move your left until its equal to the previous because of the duplication)
        
        """"res = [];
        hashset = set();
        nums.sort();
        for i in range(len(nums)-2):
            if(nums[i] not in hashset):
                hashset.add(nums[i]);
                target = -nums[i];
                j, k = i+1, len(nums)-1;
                if(j<len(nums)-1 and k<len(nums)):
                    while(j<k):
                        sum = nums[j] + nums[k];
                        if(sum==target):
                            res.append([nums[i],nums[j],nums[k]]);
                            j += 1;
                            while(j<k and nums[j]==nums[j-1]):
                                j += 1;
                        else:
                            if(sum<target):
                                j += 1;
                            else:
                                if(sum>target):
                                    k -= 1;
        return res;"""
        
       Optimised Solution - Time O(n2), Space O(n2) #Accepted
       Trick(key stored as tuple in hashmap)
        
        """"res = [];
        hashmap = {};
        nums.sort();
        for i in range(len(nums)-2):
            target = -nums[i];
            j, k = i+1, len(nums)-1;
            if(j<len(nums)-1 and k<len(nums)):
                while(j<k):
                    temp = (nums[i],nums[j],nums[k]);
                    sum = nums[j] + nums[k];
                    if(sum==target):
                        if(temp not in hashmap):
                            hashmap.update({temp:1});
                            res.append([nums[i],nums[j],nums[k]]);
                        j += 1;
                    else:
                        if(sum<target):
                            j += 1;
                        else:
                            if(sum>target):
                                k -= 1;
        return res;"""
        
       Brute Force - Time O(n3), Space O(n2) #TLE
       Trick(Nothing Clever)
        
        """"nums.sort();   
        res = [];
        hashmap = {};
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                for k in range(j+1,len(nums)):
                    sum = nums[i]+nums[j]+nums[k];
                    temp = (nums[i],nums[j],nums[k]);
                    if(sum==0 and temp not in hashmap):
                        hashmap.update({(nums[i],nums[j],nums[k]):1});
                        res.append([nums[i],nums[j],nums[k]]);       
        return res;"""
