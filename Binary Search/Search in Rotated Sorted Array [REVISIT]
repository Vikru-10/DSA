Question Link - https://leetcode.com/problems/search-in-rotated-sorted-array/

        Brute Force - Time O(n), Space O(1) #Accepted
        Trick(Nothing clever)

        """"for i in range(len(nums)):
            if(nums[i]==target):
                return i
        return -1"""
        
        Most Optimal - Time O(logn), Space O(1) #Accepted 
        Trick(It may look like dangerous but it is not if you have done find minimum in rotated sorted array because it is based on that left and right sorted portion concept, think about various cases that can be involved in rotated sorted array then shift left and right according to that)
        
        """"l, r = 0, len(nums)-1
        while(l<=r):
            mid = l + (r-l)//2
            if(nums[mid]==target):
                return mid
            elif(nums[mid]>=nums[l]):
                if(target>nums[mid]):
                    l = mid + 1
                else:
                    if(target<nums[l]):
                        l = mid + 1
                    else:
                        r = mid - 1
            else:
                if(target<nums[mid]):
                    r = mid - 1
                else:
                    if(target>nums[r]):
                        r = mid - 1
                    else:
                        l = mid + 1
        return -1"""
