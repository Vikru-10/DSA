Question Link - https://leetcode.com/problems/daily-temperatures/

        Optimal #2 - Time O(n), Space O(n) #Accepted
        Trick(Using monotonic decreasing stack concept to find next max)

        n, stack = len(temperatures), deque()
        answer = [0] * n
        stack.append(n-1)
        
        for i in range(n-2,-1,-1):
            value = temperatures[i]
            
            while stack and temperatures[stack[-1]]<=value:
                stack.pop()
            
            if not stack:
                answer[i] = 0
            else:
                answer[i] = stack[-1] - i
                
            stack.append(i)
            
        return answer
        
        Optimal #1 - Time O(n), Space O(n) #Accepted
        Trick(Same concept as above but using extra list ng to calculate our answer)
        
        """"n, stack = len(temperatures), deque()
        ng, answer = [0] * n, [0] * n
        ng[n-1] = 0
        stack.append(n-1)
        
        for i in range(n-2,-1,-1):
            value = temperatures[i]
            
            while stack and temperatures[stack[-1]]<=value:
                stack.pop()
            
            if not stack:
                ng[i] = 0
            else:
                ng[i] = stack[-1]
                
            stack.append(i)
    
        for i in range(n):
            if(ng[i]!=0):
                answer[i] = ng[i] - i
        
        return answer"""
        
        Brute Force - Time O(n2), Space O(1) #TLE
        Trick(Nothing clever)
        
        """"answer = []
        for i in range(len(temperatures)):
            flag = 0
            for j in range(i+1,len(temperatures)):
                if temperatures[j]>temperatures[i]:
                    answer.append(j-i)
                    flag = 1
                    break
            if(flag==0):
                answer.append(0)
        return answer"""
