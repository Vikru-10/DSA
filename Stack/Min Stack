Question Link - https://leetcode.com/problems/min-stack/

    Most Optimal - Time O(1) for all operations, Space O(n) #Accepted
    Trick(Use two stack to track the minimum element in the array)

    """"def __init__(self):
        self.stack = deque()
        self.min = deque()

    def push(self, val):
        if not self.min:
            self.min.append(val)
        else:
            if val<=self.min[-1]:
                self.min.append(val)
        self.stack.append(val)

    def pop(self):
        if self.min[-1]==self.stack[-1]:
            self.min.pop()
        self.stack.pop()

    def top(self):
        return self.stack[-1]
        
    def getMin(self):
        return self.min[-1]"""
   
    Optimal - Time O(1) for all except Min its O(n), Space O(n) #Accepted
    Trick(Use deque to reduce complexity of operations except min function obviously)
    
    """"def __init__(self):
        self.stack = deque()

    def push(self, val):
        self.stack.append(val)
        
    def pop(self):
        self.stack.pop()
        
    def top(self):
        return self.stack[-1]
        
    def getMin(self):
        mini = self.stack[0]
        for val in self.stack:
            mini = min(mini,val)
        return mini"""
    
    Brute Force - Time O(n) for all except top function its O(1), Space O(n) #Accepted
    Trick(Using list here and finding minimum element is not that clever)
    
    """"def __init__(self):
        self.stack = []

    def push(self, val):
        self.stack.append(val)

    def pop(self):
        self.stack.pop(-1)

    def top(self):
        return self.stack[-1]

    def getMin(self):
        mini = self.stack[0]
        for val in self.stack:
            mini = min(val,mini)
        return mini"""
    
    
